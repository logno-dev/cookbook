import { createContext, useContext, createSignal, createMemo, JSX, createEffect } from 'solid-js';
import { useLocation } from '@solidjs/router';

export interface BreadcrumbItem {
  label: string;
  href?: string;
  current?: boolean;
}

interface BreadcrumbContextType {
  items: () => BreadcrumbItem[];
  setBreadcrumbs: (items: BreadcrumbItem[]) => void;
  addBreadcrumb: (item: BreadcrumbItem) => void;
  clearBreadcrumbs: () => void;
}

const BreadcrumbContext = createContext<BreadcrumbContextType>();

export function BreadcrumbProvider(props: { children: JSX.Element }) {
  const [items, setItems] = createSignal<BreadcrumbItem[]>([]);
  const location = useLocation();

  // Auto-generate breadcrumbs based on route if no custom ones are set
  const autoGeneratedBreadcrumbs = createMemo(() => {
    const path = location.pathname;
    const segments = path.split('/').filter(Boolean);
    
    if (segments.length === 0) {
      return [{ label: 'Dashboard', href: '/dashboard', current: true }];
    }

    const breadcrumbs: BreadcrumbItem[] = [];
    let currentPath = '';

    // Always start with Dashboard for authenticated routes
    if (path !== '/login' && path !== '/register' && path !== '/') {
      breadcrumbs.push({ label: 'Dashboard', href: '/dashboard' });
    }

    segments.forEach((segment, index) => {
      currentPath += `/${segment}`;
      const isLast = index === segments.length - 1;
      
      // Skip IDs and known dynamic segments
      if (segment.length > 20 || /^[a-f0-9-]{36}$/.test(segment)) {
        return;
      }

      let label = segment.charAt(0).toUpperCase() + segment.slice(1);
      
      // Convert kebab-case to readable labels
      label = label.replace(/-/g, ' ');
      
      // Handle specific route names
      switch (segment) {
        case 'cookbooks':
          label = 'Cookbooks';
          break;
        case 'grocery-lists':
          label = 'Grocery Lists';
          break;
        case 'add-recipe':
          label = 'Add Recipe';
          break;
        case 'settings':
          label = 'Settings';
          break;
      }

      breadcrumbs.push({
        label,
        href: isLast ? undefined : currentPath,
        current: isLast
      });
    });

    return breadcrumbs;
  });

  // Use custom breadcrumbs if available, otherwise use auto-generated ones
  const finalBreadcrumbs = createMemo(() => {
    const customItems = items();
    if (customItems.length > 0) {
      return customItems;
    }
    return autoGeneratedBreadcrumbs();
  });

  // Clear custom breadcrumbs when route changes
  createEffect(() => {
    location.pathname; // Track pathname changes
    setItems([]); // Clear custom breadcrumbs on route change
  });

  const setBreadcrumbs = (newItems: BreadcrumbItem[]) => {
    setItems(newItems);
  };

  const addBreadcrumb = (item: BreadcrumbItem) => {
    setItems(prev => [...prev, item]);
  };

  const clearBreadcrumbs = () => {
    setItems([]);
  };

  return (
    <BreadcrumbContext.Provider value={{
      items: finalBreadcrumbs,
      setBreadcrumbs,
      addBreadcrumb,
      clearBreadcrumbs
    }}>
      {props.children}
    </BreadcrumbContext.Provider>
  );
}

export function useBreadcrumbs() {
  const context = useContext(BreadcrumbContext);
  if (!context) {
    throw new Error('useBreadcrumbs must be used within a BreadcrumbProvider');
  }
  return context;
}

// Helper function to generate common breadcrumb patterns
export const createBreadcrumbs = {
  cookbook: (cookbookTitle: string, cookbookId: string) => [
    { label: 'Cookbooks', href: '/cookbooks' },
    { label: cookbookTitle, href: `/cookbooks/${cookbookId}`, current: true }
  ],

  cookbookSettings: (cookbookTitle: string, cookbookId: string) => [
    { label: 'Cookbooks', href: '/cookbooks' },
    { label: cookbookTitle, href: `/cookbooks/${cookbookId}` },
    { label: 'Settings', current: true }
  ],

  recipe: (recipeTitle: string, fromContext?: { type: 'dashboard' | 'cookbook', cookbookId?: string, cookbookTitle?: string }) => {
    if (fromContext?.type === 'cookbook' && fromContext.cookbookId && fromContext.cookbookTitle) {
      return [
        { label: 'Cookbooks', href: '/cookbooks' },
        { label: fromContext.cookbookTitle, href: `/cookbooks/${fromContext.cookbookId}` },
        { label: recipeTitle, current: true }
      ];
    }
    return [
      { label: 'Dashboard', href: '/dashboard' },
      { label: recipeTitle, current: true }
    ];
  },

  groceryList: (listName: string) => [
    { label: 'Grocery Lists', href: '/grocery-lists' },
    { label: listName, current: true }
  ]
};